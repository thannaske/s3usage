name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    # Use Ubuntu 20.04 as the build environment to ensure compatibility with older systems
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        # Only build for amd64 to ensure compatibility with SQLite and older CGO versions
        include:
          - goos: linux
            ext: ""
          - goos: darwin
            ext: ""
          - goos: windows
            ext: ".exe"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: amd64
          # Set CGO_ENABLED=1 for SQLite support
          CGO_ENABLED: 1
        run: |
          # Install required build dependencies for Linux
          if [ "${{ matrix.goos }}" = "linux" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
          fi
          
          # Build with appropriate settings for each OS
          if [ "${{ matrix.goos }}" = "linux" ]; then
            # For Linux, build with specific flags to ensure compatibility with older glibc versions
            # Using -linkmode external with specific flags to create a more portable binary
            export CGO_ENABLED=1
            export CC=gcc
            # Use -ldflags to ensure the binary is more compatible with older systems
            go build -v -ldflags="-linkmode external -extldflags '-Wl,--build-id=none -static-libgcc'" -o "s3usage-${{ matrix.goos }}-amd64${{ matrix.ext }}" ./cmd/s3usage
          elif [ "${{ matrix.goos }}" = "darwin" ]; then
            # For macOS, disable CGO as cross-compilation with CGO is problematic
            CGO_ENABLED=0 go build -v -o "s3usage-${{ matrix.goos }}-amd64${{ matrix.ext }}" ./cmd/s3usage
          else
            # For Windows, disable CGO as cross-compilation with CGO is problematic
            CGO_ENABLED=0 go build -v -o "s3usage-${{ matrix.goos }}-amd64${{ matrix.ext }}" ./cmd/s3usage
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: s3usage-${{ matrix.goos }}-amd64
          path: s3usage-${{ matrix.goos }}-amd64${{ matrix.ext }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: s3usage-*
          merge-multiple: true

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true 